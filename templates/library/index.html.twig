{% extends 'base.html.twig' %}

{#
    Library Management Page
    
    Purpose: Manage user's music library with tracks and playlists
    Features:
    - Tab-based interface (Tracks/Playlists)
    - Full CRUD operations for tracks and playlists
    - Advanced search and filtering
    - Modal-based forms for better UX
    - Drag & drop support for playlist management
#}

{% block title %}My Library{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    
    <!-- Tab Flash Prevention Script: Ensures smooth tab switching from URL hash -->
    <script>
    (function() {
        /* Prevent visual flash when loading page with #playlists hash */
        if (window.location.hash === '#playlists') {
            /* Inject CSS immediately to hide tracks tab during load */
            document.head.insertAdjacentHTML('beforeend', 
                '<style id="tab-flash-fix">' +
                '#tracks.show.active, #tracks.active, #tracks.tab-pane.active { display: none !important; }' +
                '#playlists.tab-pane { display: block !important; }' +
                '#tracks-tab.active { background-color: var(--bs-nav-tabs-link-active-bg, #fff) !important; }' +
                '#playlists-tab { background-color: var(--bs-nav-tabs-link-active-bg, #fff) !important; color: var(--bs-nav-tabs-link-active-color, #495057) !important; border-color: var(--bs-nav-tabs-link-active-border-color, #dee2e6 #dee2e6 #fff) !important; }' +
                '</style>'
            );
        }
    })();
    </script>
    
    <style>
    /* Library Page Interactive Styles */
    
    /* Playlist Card Hover Effects */
    .playlist-card:hover {
        background-color: #495057 !important;
        cursor: pointer;
    }

    /* Track list item hover highlighting */
    .track-item:hover {
        background-color: rgba(255,255,255,0.1);
        border-radius: 5px;
        cursor: pointer;
    }

    /* Album card base styling and smooth transitions */
    .album-card {
        transition: transform 0.3s ease;
    }

    .album-card:hover {
        transform: scale(1.05);
        cursor: pointer;
    }

    /* Action buttons with fade-in effect on hover */
    .play-btn-hover {
        opacity: 0;
        transition: opacity 0.3s ease;
        box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        border-radius: 6px !important;
    }

    .album-card:hover .play-btn-hover {
        opacity: 1;
    }

    /* Button sizing and positioning controls */
    .play-btn-hover {
        min-width: 32px !important;
        min-height: 32px !important;
    }

    .play-btn-hover:hover {
        transform: scale(1.05);
    }
    </style>
{% endblock %}

{% block body %}
<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2><i class="fas fa-music me-2"></i>My Library</h2>
                <div>
                    {% if app.user %}
                        <a href="{{ path('app_upload_track') }}" class="btn btn-success me-2">
                            <i class="fas fa-plus me-2"></i>Upload Track
                        </a>
                        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createPlaylistModal">
                            <i class="fas fa-plus me-2"></i>Create Playlist
                        </button>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>

    {% set showPlaylistsTab = app.request.query.get('playlist') %}
    <ul class="nav nav-tabs mb-4" id="libraryTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link {{ showPlaylistsTab ? '' : 'active' }}" id="tracks-tab" data-bs-toggle="tab" data-bs-target="#tracks" 
                    type="button" role="tab" aria-controls="tracks" aria-selected="{{ showPlaylistsTab ? 'false' : 'true' }}">
                <i class="fas fa-music me-2"></i>My Tracks ({{ tracks|length }})
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link {{ showPlaylistsTab ? 'active' : '' }}" id="playlists-tab" data-bs-toggle="tab" data-bs-target="#playlists" 
                    type="button" role="tab" aria-controls="playlists" aria-selected="{{ showPlaylistsTab ? 'true' : 'false' }}">
                <i class="fas fa-list me-2"></i>My Playlists ({{ playlists|length }})
            </button>
        </li>
    </ul>

    <div class="tab-content" id="libraryTabsContent">
        <div class="tab-pane fade {{ showPlaylistsTab ? '' : 'show active' }}" id="tracks" role="tabpanel" aria-labelledby="tracks-tab">
            {% if tracks|length > 0 %}
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-music me-2"></i>Your Music Collection
                        </h5>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-dark table-hover mb-0">
                                <thead>
                                    <tr>
                                        <th width="60">Cover</th>
                                        <th>Title</th>
                                        <th>Artist</th>
                                        <th>Album/Playlist</th>
                                        <th>Genre</th>
                                        <th>Listens</th>
                                        <th>Date</th>
                                        <th width="200">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {% for track in tracks %}
                                        <tr class="track-item">
                                            <td>
                                                {% if track.coverImage %}
                                                    <img src="{{ media_cover(track.coverImage) }}" 
                                                         alt="{{ track.title }} cover" 
                                                         class="rounded" 
                                                         style="width: 40px; height: 40px; object-fit: cover;">
                                                {% else %}
                                                    <div class="bg-gradient-primary rounded d-flex align-items-center justify-content-center" 
                                                         style="width: 40px; height: 40px; background: linear-gradient(45deg, #667eea, #764ba2);">
                                                        <i class="fas fa-music text-white"></i>
                                                    </div>
                                                {% endif %}
                                            </td>
                                            <td>
                                                <strong>{{ track.title }}</strong>
                                            </td>
                                            <td>{{ track.artist }}</td>
                                            <td>
                                                {% if track.playlists|length > 0 %}
                                                    {% for playlist in track.playlists %}
                                                        {% if playlist.owner == app.user %}
                                                            <span class="badge bg-primary me-1">{{ playlist.name }}</span>
                                                        {% endif %}
                                                    {% endfor %}
                                                {% else %}
                                                    <span class="text-muted">No playlist</span>
                                                {% endif %}
                                            </td>
                                            <td>
                                                {% if track.genre %}
                                                    <span class="badge bg-secondary">{{ track.genre }}</span>
                                                {% else %}
                                                    -
                                                {% endif %}
                                            </td>
                                            <td>
                                                <span class="badge bg-warning text-dark" data-track-id="{{ track.id }}" id="track-playcount-{{ track.id }}">
                                                    <i class="fas fa-headphones-alt me-1"></i><span class="count">{{ track.playCount }}</span>
                                                </span>
                                            </td>
                                            <td>
                                                <small class="text-muted">
                                                    {{ track.createdAt|date('M d, Y') }}
                                                </small>
                                            </td>
                                            <td>
                                                <div class="btn-group btn-group-sm">
                            <button class="btn btn-outline-info" data-track-id="{{ track.id }}" 
                                onclick="safePlayTrack('{{ track.audioFile }}', '{{ track.title|escape('js') }}', '{{ track.artist|escape('js') }}', '{{ track.coverImage }}', {{ track.id }})"
                                title="Play">
                                                        <i class="fas fa-play"></i>
                                                    </button>
                                                    <button class="btn btn-outline-success" 
                                                            onclick="showAddToPlaylistModal({{ track.id }}, '{{ track.title|escape('js') }}', '{{ track.artist|escape('js') }}')"
                                                            title="Add to Playlist">
                                                        <i class="fas fa-plus"></i>
                                                    </button>
                                                    <button class="btn btn-outline-warning" 
                                                            onclick="editTrack({{ track.id }}, '{{ track.title|escape('js') }}', '{{ track.artist|escape('js') }}', '{% for playlist in track.playlists %}{% if playlist.owner == app.user %}{{ playlist.name|escape('js') }}{% endif %}{% endfor %}', '{{ track.genre|escape('js') }}', '{{ track.description|escape('js') }}')"
                                                            title="Edit">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button class="btn btn-outline-danger" 
                                                            onclick="deleteTrack({{ track.id }}, '{{ track.title|escape('js') }}')"
                                                            title="Delete">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    {% endfor %}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            {% else %}
                <div class="text-center py-5">
                    <i class="fas fa-compact-disc fa-4x text-muted mb-3"></i>
                    <h4 class="text-muted">No tracks uploaded yet</h4>
                    <p class="text-muted mb-4">Start building your music library!</p>
                    <a href="{{ path('app_upload_track') }}" class="btn btn-primary">
                        <i class="fas fa-plus me-2"></i>Upload Your First Track
                    </a>
                </div>
            {% endif %}
        </div>

        <div class="tab-pane fade {{ showPlaylistsTab ? 'show active' : '' }}" id="playlists" role="tabpanel" aria-labelledby="playlists-tab">
            {% if playlists|length > 0 %}
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="fas fa-list me-2"></i>Your Playlists
                        </h5>
                        <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#createPlaylistModal">
                            <i class="fas fa-plus me-2"></i>Create Playlist
                        </button>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-dark table-hover mb-0">
                                <thead>
                                    <tr>
                                        <th width="60">Icon</th>
                                        <th>Name</th>
                                        <th>Description</th>
                                        <th>Tracks</th>
                                        <th>Listens</th>
                                        <th>Privacy</th>
                                        <th>Created</th>
                                        <th width="250">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {% for playlist in playlists %}
                                        <tr class="playlist-item" id="playlist-row-{{ playlist.id }}">
                                            <td>
                                                {% if playlist.coverImage %}
                                                    <img src="{{ media_cover(playlist.coverImage) }}" 
                                                         alt="{{ playlist.name }} cover" 
                                                         class="rounded" 
                                                         style="width: 40px; height: 40px; object-fit: cover;">
                                                {% else %}
                                                    <div class="bg-gradient-primary rounded d-flex align-items-center justify-content-center" 
                                                         style="width: 40px; height: 40px; background: linear-gradient(45deg, #667eea, #764ba2);">
                                                        <i class="fas fa-list text-white"></i>
                                                    </div>
                                                {% endif %}
                                            </td>
                                            <td>
                                                <strong>{{ playlist.name }}</strong>
                                            </td>
                                            <td>
                                                <span class="text-muted">{{ playlist.description ?: 'No description' }}</span>
                                            </td>
                                            <td>
                                                <span class="badge bg-info">{{ playlist.tracks|length }} tracks</span>
                                            </td>
                                            <td>
                                                <span class="badge bg-warning text-dark" data-playlist-id="{{ playlist.id }}" id="playlist-playcount-{{ playlist.id }}">
                                                    <i class="fas fa-headphones-alt me-1"></i><span class="count">{{ playlist.playCount }}</span>
                                                </span>
                                            </td>
                                            <td>
                                                {% if playlist.isPublic %}
                                                    <span class="badge bg-success">Public</span>
                                                {% else %}
                                                    <span class="badge bg-secondary">Private</span>
                                                {% endif %}
                                            </td>
                                            <td>
                                                <small class="text-muted">
                                                    {{ playlist.createdAt|date('M d, Y') }}
                                                </small>
                                            </td>
                                            <td>
                                                <div class="btn-group btn-group-sm">
                                                    <button class="btn btn-outline-info" 
                                                            onclick="viewPlaylist({{ playlist.id }})"
                                                            title="View Playlist">
                                                        <i class="fas fa-eye"></i>
                                                    </button>
                                                    {% if playlist.tracks|length > 0 %}
                                                        <button class="btn btn-outline-success" 
                                                                onclick="playAllFromPlaylist({{ playlist.id }}, '{{ playlist.name|escape('js') }}')"
                                                                title="Play All">
                                                            <i class="fas fa-play"></i>
                                                        </button>
                                                    {% endif %}
                                                    <button class="btn btn-outline-primary" 
                                                            onclick="showAddTrackToPlaylistModal({{ playlist.id }}, '{{ playlist.name|escape('js') }}')"
                                                            title="Add Track">
                                                        <i class="fas fa-plus"></i>
                                                    </button>
                                                    <button class="btn btn-outline-warning" 
                                                            onclick="editPlaylist({{ playlist.id }}, '{{ playlist.name|escape('js') }}', '{{ playlist.description|escape('js') }}', {{ playlist.isPublic ? 'true' : 'false' }})"
                                                            title="Edit Playlist">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button class="btn btn-outline-secondary" 
                                                            onclick="togglePlaylistPrivacy({{ playlist.id }})"
                                                            title="Toggle Privacy">
                                                        <i class="fas fa-{{ playlist.isPublic ? 'lock' : 'unlock' }}"></i>
                                                    </button>
                                                    <button class="btn btn-outline-danger" 
                                                            onclick="deletePlaylist({{ playlist.id }}, '{{ playlist.name|escape('js') }}')"
                                                            title="Delete Playlist">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    {% endfor %}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            {% else %}
                <div class="text-center py-5">
                    <i class="fas fa-list fa-4x text-muted mb-3"></i>
                    <h4 class="text-muted">No playlists created yet</h4>
                    <p class="text-muted mb-4">Create your first playlist to organize your music!</p>
                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createPlaylistModal">
                        <i class="fas fa-plus me-2"></i>Create Your First Playlist
                    </button>
                </div>
            {% endif %}
        </div>
    </div>
</div>

<div class="modal fade" id="createPlaylistModal" tabindex="-1" aria-labelledby="createPlaylistModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content bg-dark">
            <div class="modal-header">
                <h5 class="modal-title" id="createPlaylistModalLabel">Create New Playlist</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="createPlaylistForm">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="playlistName" class="form-label">Playlist Name</label>
                        <input type="text" class="form-control bg-dark text-white border-secondary" id="playlistName" name="name" required>
                    </div>
                    <div class="mb-3">
                        <label for="playlistDescription" class="form-label">Description (Optional)</label>
                        <textarea class="form-control bg-dark text-white border-secondary" id="playlistDescription" name="description" rows="3"></textarea>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="playlistIsPublic" name="is_public">
                        <label class="form-check-label" for="playlistIsPublic">
                            Make this playlist public
                        </label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Create Playlist</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="editPlaylistModal" tabindex="-1" aria-labelledby="editPlaylistModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content bg-dark">
            <div class="modal-header">
                <h5 class="modal-title" id="editPlaylistModalLabel">Edit Playlist</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="editPlaylistForm">
                <input type="hidden" id="editPlaylistId" name="id">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="editPlaylistName" class="form-label">Playlist Name</label>
                        <input type="text" class="form-control bg-dark text-white border-secondary" id="editPlaylistName" name="name" required>
                    </div>
                    <div class="mb-3">
                        <label for="editPlaylistDescription" class="form-label">Description (Optional)</label>
                        <textarea class="form-control bg-dark text-white border-secondary" id="editPlaylistDescription" name="description" rows="3"></textarea>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="editPlaylistIsPublic" name="is_public">
                        <label class="form-check-label" for="editPlaylistIsPublic">
                            Make this playlist public
                        </label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-warning">Update Playlist</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="addTrackToPlaylistModal" tabindex="-1" aria-labelledby="addTrackToPlaylistModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content bg-dark">
            <div class="modal-header">
                <h5 class="modal-title" id="addTrackToPlaylistModalLabel">Add Track to Playlist</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="addTrackToPlaylistForm">
                <input type="hidden" id="targetPlaylistId" name="playlistId">
                <div class="modal-body">
                    <p>Select a track to add to <strong id="targetPlaylistName"></strong>:</p>
                    <div class="mb-3">
                        <label for="searchTrackInput" class="form-label">Search Tracks</label>
                        <input type="text" class="form-control bg-dark text-white border-secondary" 
                               id="searchTrackInput" 
                               placeholder="Type to search for a track..." 
                               autocomplete="off">
                        <div id="searchResults" class="list-group mt-2" style="max-height: 300px; overflow-y: auto; display: none;">
                            <!-- Search results will appear here -->
                        </div>
                        <input type="hidden" id="selectedTrackId" name="trackId">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success">Add Track</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="deletePlaylistModal" tabindex="-1" aria-labelledby="deletePlaylistModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content bg-dark">
            <div class="modal-header">
                <h5 class="modal-title" id="deletePlaylistModalLabel">Delete Playlist</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the playlist <strong id="deletePlaylistName"></strong>?</p>
                <p class="text-warning">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeletePlaylist">Delete</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="viewPlaylistModal" tabindex="-1" aria-labelledby="viewPlaylistModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content bg-dark">
            <div class="modal-header">
                <h5 class="modal-title" id="viewPlaylistModalLabel">Playlist Details</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-4 text-center">
                        <div id="viewPlaylistCover" class="mb-3">
                            <!-- Cover image will be inserted here -->
                        </div>
                        <button class="btn btn-success w-100" id="playAllPlaylistBtn" style="display: none;">
                            <i class="fas fa-play me-2"></i>Play All
                        </button>
                    </div>
                    <div class="col-md-8">
                        <h3 id="viewPlaylistName">Loading...</h3>
                        <p id="viewPlaylistDescription" class="text-muted">-</p>
                        <div class="text-muted small mb-3">
                            <i class="fas fa-music me-1"></i><span id="viewPlaylistTracksCount">0</span> tracks •
                            <i class="fas fa-clock me-1"></i><span id="viewPlaylistDuration">0:00</span> •
                            <span id="viewPlaylistStatus">-</span> •
                            Created <span id="viewPlaylistCreated">-</span>
                        </div>
                    </div>
                </div>
                
                <hr>
                
                <h5>Tracks</h5>
                <div id="viewPlaylistTracks">
                    <div class="text-center py-3">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="addToPlaylistModal" tabindex="-1" aria-labelledby="addToPlaylistModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content bg-dark">
            <div class="modal-header">
                <h5 class="modal-title" id="addToPlaylistModalLabel">Add Track to Playlist</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="addToPlaylistForm">
                <input type="hidden" id="trackIdToAdd" name="trackId">
                <div class="modal-body">
                    <p>Add "<strong id="trackTitleToAdd"></strong>" by <strong id="trackArtistToAdd"></strong> to:</p>
                    <div class="mb-3">
                        <label for="selectPlaylistForTrack" class="form-label">Select Playlist</label>
                        <select class="form-select bg-dark text-white border-secondary" id="selectPlaylistForTrack" name="playlistId" required>
                            <option value="">Select a playlist...</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success">Add to Playlist</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="editTrackModal" tabindex="-1" aria-labelledby="editTrackModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content bg-dark">
            <div class="modal-header">
                <h5 class="modal-title" id="editTrackModalLabel">Edit Track</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="editTrackForm">
                <input type="hidden" id="editTrackId" name="id">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="editTrackTitle" class="form-label">Title</label>
                        <input type="text" class="form-control bg-dark text-white border-secondary" id="editTrackTitle" name="title" required>
                    </div>
                    <div class="mb-3">
                        <label for="editTrackArtist" class="form-label">Artist</label>
                        <input type="text" class="form-control bg-dark text-white border-secondary" id="editTrackArtist" name="artist" required>
                    </div>
                    <div class="mb-3">
                        <label for="editTrackAlbum" class="form-label">Album (Optional)</label>
                        <input type="text" class="form-control bg-dark text-white border-secondary" id="editTrackAlbum" name="album">
                    </div>
                    <div class="mb-3">
                        <label for="editTrackGenre" class="form-label">Genre (Optional)</label>
                        <input type="text" class="form-control bg-dark text-white border-secondary" id="editTrackGenre" name="genre">
                    </div>
                    <div class="mb-3">
                        <label for="editTrackDescription" class="form-label">Description (Optional)</label>
                        <textarea class="form-control bg-dark text-white border-secondary" id="editTrackDescription" name="description" rows="3"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-warning">Update Track</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="deleteTrackModal" tabindex="-1" aria-labelledby="deleteTrackModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content bg-dark">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteTrackModalLabel">Delete Track</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the track <strong id="deleteTrackTitle"></strong>?</p>
                <p class="text-warning">This action cannot be undone and will remove the track from all playlists.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteTrack">Delete</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="removeTrackFromPlaylistModal" tabindex="-1" aria-labelledby="removeTrackFromPlaylistModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content bg-dark">
            <div class="modal-header">
                <h5 class="modal-title" id="removeTrackFromPlaylistModalLabel">Remove Track from Playlist</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to remove <strong id="removeTrackTitle"></strong> from the playlist <strong id="removeFromPlaylistName"></strong>?</p>
                <p class="text-info">
                    <i class="fas fa-info-circle me-2"></i>
                    This will only remove the track from this playlist. The track will remain in your library and other playlists.
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmRemoveTrackFromPlaylist">Remove from Playlist</button>
            </div>
        </div>
    </div>
</div>

{% endblock %}

{% block javascripts %}
<script>
/**
 * Library Management JavaScript
 * 
 * This script handles all client-side functionality for the library page:
 * - AJAX routes configuration
 * - Playlist and track management functions
 * - Modal interactions and form submissions
 * - Search and filtering capabilities
 */

/* AJAX Route Configuration */
window.libraryViewPlaylistRoute = '{{ path('app_library_view_playlist', {'id': '__ID__'}) }}';
window.createPlaylistRoute = '{{ path('app_library_create_playlist') }}';
window.editPlaylistRoute = '{{ path('app_library_edit_playlist', {'id': '__ID__'}) }}';
window.deletePlaylistRoute = '{{ path('app_library_delete_playlist', {'id': '__ID__'}) }}';
window.togglePlaylistPrivacyRoute = '{{ path('app_library_toggle_playlist_privacy', {'id': '__ID__'}) }}';
window.addTrackToPlaylistRoute = '{{ path('app_library_add_track_to_playlist') }}';
window.editTrackRoute = '{{ path('app_library_edit_track', {'id': '__ID__'}) }}';
window.deleteTrackRoute = '{{ path('app_library_delete_track', {'id': '__ID__'}) }}';
window.playlistsForTrackRoute = '{{ path('app_library_playlists_for_track', {'trackId': '__TRACK_ID__'}) }}';
window.removeTrackFromPlaylistRoute = '{{ path('app_library_remove_track_from_playlist') }}';

/**
 * Tab Management Functions
 */
function activatePlaylistsTab() {
    const playlistsTabButton = document.getElementById('playlists-tab');
    const tracksTabButton = document.getElementById('tracks-tab');
    
    if (playlistsTabButton && tracksTabButton) {
        tracksTabButton.classList.remove('active');
        playlistsTabButton.classList.add('active');
        
        document.getElementById('tracks').classList.remove('show', 'active');
        document.getElementById('playlists').classList.add('show', 'active');
    }
}

function viewPlaylist(id) {
    const modal = new bootstrap.Modal(document.getElementById('viewPlaylistModal'));
    modal.show();
    
    document.getElementById('viewPlaylistName').textContent = 'Loading...';
    document.getElementById('viewPlaylistDescription').textContent = '-';
    document.getElementById('viewPlaylistTracksCount').textContent = '0';
    document.getElementById('viewPlaylistDuration').textContent = '0:00';
    document.getElementById('viewPlaylistStatus').textContent = '-';
    document.getElementById('viewPlaylistCreated').textContent = '-';
    document.getElementById('playAllPlaylistBtn').style.display = 'none';
    document.getElementById('viewPlaylistCover').innerHTML = '<div class="bg-secondary rounded d-flex align-items-center justify-content-center mx-auto" style="width: 150px; height: 150px;"><div class="spinner-border text-light" role="status"></div></div>';
    document.getElementById('viewPlaylistTracks').innerHTML = '<div class="text-center py-3"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>';
    
    const url = window.libraryViewPlaylistRoute.replace('__ID__', id);
    
    fetch(url, {
        headers: {
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const playlist = data.playlist;
            
            document.getElementById('viewPlaylistName').textContent = playlist.name;
            document.getElementById('viewPlaylistDescription').textContent = playlist.description || 'No description';
            document.getElementById('viewPlaylistTracksCount').textContent = playlist.tracksCount;
            document.getElementById('viewPlaylistDuration').textContent = playlist.totalDuration;
            document.getElementById('viewPlaylistStatus').textContent = playlist.isPublic ? 'Public' : 'Private';
            document.getElementById('viewPlaylistCreated').textContent = playlist.createdAt;
            
            const coverContainer = document.getElementById('viewPlaylistCover');
            if (playlist.coverImage) {
                coverContainer.innerHTML = `<img src="/media/cover/${playlist.coverImage}" alt="${playlist.name} cover" class="img-fluid rounded" style="max-width: 200px; max-height: 200px; object-fit: cover;">`;
            } else {
                coverContainer.innerHTML = `<div class="bg-gradient-primary rounded d-flex align-items-center justify-content-center mx-auto" style="width: 150px; height: 150px;"><i class="fas fa-list text-white fa-3x"></i></div>`;
            }
            
            if (playlist.tracks.length > 0) {
                const playAllBtn = document.getElementById('playAllPlaylistBtn');
                playAllBtn.style.display = 'block';
                playAllBtn.onclick = () => {
                    playAllFromPlaylist(id, playlist.name);
                    modal.hide();
                };
            }
            
            const tracksContainer = document.getElementById('viewPlaylistTracks');
            if (playlist.tracks.length > 0) {
                let tracksHtml = '<div class="table-responsive"><table class="table table-dark table-hover"><thead><tr><th width="40">#</th><th width="50">Cover</th><th>Track</th><th width="100">Duration</th><th width="120">Actions</th></tr></thead><tbody>';
                const playlistName = playlist.name.replace(/'/g, "\\'").replace(/"/g, '\\"');
                
                playlist.tracks.forEach((track, index) => {
                    // Escape values safely
                    const trackTitle = track.title.replace(/'/g, "\\'").replace(/"/g, '\\"');
                    const trackArtist = track.artist.replace(/'/g, "\\'").replace(/"/g, '\\"');
                    const trackAudioFile = track.audioFile || '';
                    const trackCoverImage = track.coverImage || '';
                    
                    tracksHtml += `
                        <tr>
                            <td width="40">${index + 1}</td>
                            <td width="50">
                                ${track.coverImage ? 
                                    `<img src="/media/cover/${track.coverImage}" class="rounded" style="width: 40px; height: 40px; object-fit: cover;">` : 
                                    `<div class="bg-gradient-primary rounded d-flex align-items-center justify-content-center" style="width: 40px; height: 40px;"><i class="fas fa-music text-white" style="font-size: 12px;"></i></div>`
                                }
                            </td>
                            <td>
                                <div class="d-flex flex-column">
                                    <strong>${track.title}</strong>
                                    <small class="text-muted">${track.artist}</small>
                                </div>
                            </td>
                            <td width="100">${track.duration}</td>
                            <td width="120">
                                <div class="btn-group btn-group-sm">
                                    <button class="btn btn-outline-success" 
                                            onclick="safePlayTrack('${trackAudioFile}', '${trackTitle}', '${trackArtist}', '${trackCoverImage}')"
                                            title="Play">
                                        <i class="fas fa-play"></i>
                                    </button>
                                    <button class="btn btn-outline-danger" 
                                            onclick="removeTrackFromPlaylist(${playlist.id}, ${track.id}, '${trackTitle}', '${playlistName}')"
                                            title="Remove from playlist">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    `;
                });
                
                tracksHtml += '</tbody></table></div>';
                tracksContainer.innerHTML = tracksHtml;
            } else {
                tracksContainer.innerHTML = '<div class="text-center py-3 text-muted">No tracks in this playlist</div>';
            }
        } else {
            showNotification('Error loading playlist: ' + (data.error || 'Unknown error'), 'error');
        }
    })
    .catch(error => {
        console.error('Error loading playlist:', error);
        showNotification('Error loading playlist', 'error');
    });
}

function editPlaylist(id, name, description, isPublic) {
    document.getElementById('editPlaylistId').value = id;
    document.getElementById('editPlaylistName').value = name;
    document.getElementById('editPlaylistDescription').value = description || '';
    document.getElementById('editPlaylistIsPublic').checked = isPublic;
    
    const modal = new bootstrap.Modal(document.getElementById('editPlaylistModal'));
    modal.show();
}

function deletePlaylist(id, name) {
    document.getElementById('deletePlaylistName').textContent = name;
    
    const confirmBtn = document.getElementById('confirmDeletePlaylist');
    confirmBtn.onclick = function() {
        performDeletePlaylist(id);
    };
    
    const modal = new bootstrap.Modal(document.getElementById('deletePlaylistModal'));
    modal.show();
}

function performDeletePlaylist(id) {
    const url = window.deletePlaylistRoute.replace('__ID__', id);
    
    fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const row = document.getElementById('playlist-row-' + id);
            if (row) {
                row.remove();
            }
            
            bootstrap.Modal.getInstance(document.getElementById('deletePlaylistModal')).hide();
            
            showNotification('Playlist deleted successfully!', 'success');
            
            setTimeout(() => {
                window.location.href = window.location.pathname + '#playlists';
                location.reload();
            }, 1000);
        } else {
            showNotification('Error deleting playlist: ' + (data.error || data.message), 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showNotification('An error occurred while deleting the playlist.', 'error');
    });
}

function togglePlaylistPrivacy(id) {
    const url = window.togglePlaylistPrivacyRoute.replace('__ID__', id);
    
    fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showNotification('Playlist privacy updated!', 'success');
            setTimeout(() => {
                window.location.href = window.location.pathname + '#playlists';
                location.reload();
            }, 1000);
        } else {
            showNotification('Error updating privacy: ' + data.message, 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showNotification('An error occurred while updating privacy.', 'error');
    });
}

// Show add track to playlist modal
function showAddTrackToPlaylistModal(playlistId, playlistName) {
    // Safely set values with null checks
    const targetPlaylistId = document.getElementById('targetPlaylistId');
    const targetPlaylistName = document.getElementById('targetPlaylistName');
    const searchTrackInput = document.getElementById('searchTrackInput');
    const selectedTrackId = document.getElementById('selectedTrackId');
    const searchResults = document.getElementById('searchResults');
    const selectedTrackInfo = document.getElementById('selectedTrackInfo');
    
    if (targetPlaylistId) targetPlaylistId.value = playlistId;
    if (targetPlaylistName) targetPlaylistName.textContent = playlistName;
    
    // Reset search with null checks
    if (searchTrackInput) searchTrackInput.value = '';
    if (selectedTrackId) selectedTrackId.value = '';
    if (searchResults) searchResults.style.display = 'none';
    if (selectedTrackInfo) selectedTrackInfo.style.display = 'none';
    
    const modalElement = document.getElementById('addTrackToPlaylistModal');
    if (modalElement) {
        const modal = new bootstrap.Modal(modalElement);
        modal.show();
    } else {
        console.error('Add track to playlist modal not found');
    }
}

// Search tracks function
function searchTracks(query) {
    if (query.length < 2) {
        document.getElementById('searchResults').style.display = 'none';
        return;
    }
    
    const playlistId = document.getElementById('targetPlaylistId').value;
    
    fetch(`{{ path('app_library_search_tracks') }}?q=${encodeURIComponent(query)}&playlist_id=${playlistId}`, {
        headers: {
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
    .then(response => response.json())
    .then(data => {
        const resultsContainer = document.getElementById('searchResults');
        resultsContainer.innerHTML = '';
        
        if (data.tracks && data.tracks.length > 0) {
            data.tracks.forEach(track => {
                // Skip tracks already in the playlist
                if (track.inPlaylist) return;
                
                const item = document.createElement('a');
                item.className = 'list-group-item list-group-item-action bg-dark text-white border-secondary';
                item.style.cursor = 'pointer';
                item.innerHTML = `
                    <div class="d-flex align-items-center">
                        ${track.coverImage ? 
                            `<img src="/media/cover/${track.coverImage}" class="rounded me-2" style="width: 30px; height: 30px; object-fit: cover;">` : 
                            `<div class="bg-gradient-primary rounded me-2 d-flex align-items-center justify-content-center" style="width: 30px; height: 30px;"><i class="fas fa-music text-white" style="font-size: 10px;"></i></div>`
                        }
                        <div>
                            <strong>${track.title}</strong><br>
                            <small class="text-muted">${track.artist}</small>
                        </div>
                    </div>
                `;
                item.onclick = () => selectTrack(track.id, track.title, track.artist);
                resultsContainer.appendChild(item);
            });
            
            if (resultsContainer.children.length === 0) {
                resultsContainer.innerHTML = '<div class="list-group-item bg-dark text-muted border-secondary">All matching tracks are already in this playlist</div>';
            }
            resultsContainer.style.display = 'block';
        } else {
            resultsContainer.innerHTML = '<div class="list-group-item bg-dark text-muted border-secondary">No tracks found</div>';
            resultsContainer.style.display = 'block';
        }
    })
    .catch(error => {
        console.error('Error searching tracks:', error);
        const resultsContainer = document.getElementById('searchResults');
        resultsContainer.innerHTML = '<div class="list-group-item bg-dark text-danger border-secondary">Error searching tracks</div>';
        resultsContainer.style.display = 'block';
    });
}

// Select track function
function selectTrack(trackId, title, artist) {
    const selectedTrackId = document.getElementById('selectedTrackId');
    const selectedTrackText = document.getElementById('selectedTrackText');
    const selectedTrackInfo = document.getElementById('selectedTrackInfo');
    const searchResults = document.getElementById('searchResults');
    const searchTrackInput = document.getElementById('searchTrackInput');
    
    if (selectedTrackId) selectedTrackId.value = trackId;
    if (selectedTrackText) selectedTrackText.textContent = `${title} - ${artist}`;
    if (selectedTrackInfo) selectedTrackInfo.style.display = 'block';
    if (searchResults) searchResults.style.display = 'none';
    if (searchTrackInput) searchTrackInput.value = `${title} - ${artist}`;
}

// Play all tracks from playlist
function playAllFromPlaylist(playlistId, playlistName) {
    // Fetch playlist tracks and play them
    const url = window.libraryViewPlaylistRoute.replace('__ID__', playlistId);
    
    fetch(url, {
        headers: {
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success && data.playlist.tracks.length > 0) {
            const tracks = data.playlist.tracks;
            
            // Use the global audio player function to play ALL tracks from the playlist
            if (window.audioPlayer && window.audioPlayer.playAllFromPlaylist) {
                window.audioPlayer.playAllFromPlaylist(playlistId, playlistName, tracks);
            } else {
                showNotification('Audio player not available', 'error');
            }
        } else {
            showNotification('No tracks found in this playlist', 'warning');
        }
    })
    .catch(error => {
        console.error('Error loading playlist:', error);
        showNotification('Error loading playlist tracks', 'error');
    });
}

// Utility function to show notifications
function showNotification(message, type) {
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show position-fixed`;
    notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
    notification.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    document.body.appendChild(notification);
    
    // Auto remove after 3 seconds
    setTimeout(() => {
        if (notification.parentNode) {
            notification.remove();
        }
    }, 3000);
}

// Initialize page
document.addEventListener('DOMContentLoaded', function() {
    // Create playlist form handler
    document.getElementById('createPlaylistForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        
        fetch(window.createPlaylistRoute, {
            method: 'POST',
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                bootstrap.Modal.getInstance(document.getElementById('createPlaylistModal')).hide();
                showNotification('Playlist created successfully!', 'success');
                setTimeout(() => {
                    // Stay on playlists tab after creation
                    window.location.href = window.location.pathname + '#playlists';
                    location.reload();
                }, 1000);
            } else {
                showNotification('Error creating playlist: ' + data.message, 'error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showNotification('An error occurred while creating the playlist.', 'error');
        });
    });
    
    // Edit playlist form handler
    document.getElementById('editPlaylistForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        const playlistId = document.getElementById('editPlaylistId').value;
        const url = window.editPlaylistRoute.replace('__ID__', playlistId);
        
        fetch(url, {
            method: 'POST',
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                bootstrap.Modal.getInstance(document.getElementById('editPlaylistModal')).hide();
                showNotification('Playlist updated successfully!', 'success');
                setTimeout(() => {
                    // Stay on playlists tab after edit
                    window.location.href = window.location.pathname + '#playlists';
                    location.reload();
                }, 1000);
            } else {
                showNotification('Error updating playlist: ' + data.message, 'error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showNotification('An error occurred while updating the playlist.', 'error');
        });
    });
    
    // Add track to playlist form handler
    document.getElementById('addTrackToPlaylistForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const playlistId = document.getElementById('targetPlaylistId').value;
        const trackId = document.getElementById('selectedTrackId').value;
        
        if (!trackId) {
            showNotification('Please select a track first', 'error');
            return;
        }
        
        fetch(window.addTrackToPlaylistRoute, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({
                playlistId: parseInt(playlistId),
                trackId: parseInt(trackId)
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                bootstrap.Modal.getInstance(document.getElementById('addTrackToPlaylistModal')).hide();
                showNotification('Track added to playlist successfully!', 'success');
                setTimeout(() => {
                    window.location.href = window.location.pathname + '#playlists';
                    location.reload();
                }, 1000);
            } else {
                showNotification('Error adding track: ' + (data.error || data.message), 'error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showNotification('An error occurred while adding the track.', 'error');
        });
    });
    
    // Search tracks input handler
    document.getElementById('searchTrackInput').addEventListener('input', function(e) {
        const query = e.target.value.trim();
        searchTracks(query);
    });
});

// Track-related functions
function showAddToPlaylistModal(trackId, title, artist) {
    // Set track info
    document.getElementById('trackIdToAdd').value = trackId;
    document.getElementById('trackTitleToAdd').textContent = title;
    document.getElementById('trackArtistToAdd').textContent = artist;
    
    // Load user's playlists
    const playlistSelect = document.getElementById('selectPlaylistForTrack');
    playlistSelect.innerHTML = '<option value="">Loading playlists...</option>';
    
    // Fetch user's playlists
    const url = window.playlistsForTrackRoute.replace('__TRACK_ID__', trackId);
    
    fetch(url, {
        headers: {
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
    .then(response => response.json())
    .then(data => {
        playlistSelect.innerHTML = '<option value="">Select a playlist...</option>';
        
        if (data.playlists && data.playlists.length > 0) {
            data.playlists.forEach(playlist => {
                const option = document.createElement('option');
                option.value = playlist.id;
                option.textContent = playlist.name + (playlist.hasTrack ? ' (already contains this track)' : '');
                if (playlist.hasTrack) {
                    option.disabled = true;
                    option.style.color = '#6c757d';
                }
                playlistSelect.appendChild(option);
            });
        } else {
            playlistSelect.innerHTML = '<option value="">No playlists available</option>';
        }
    })
    .catch(error => {
        console.error('Error loading playlists:', error);
        playlistSelect.innerHTML = '<option value="">Error loading playlists</option>';
    });
    
    // Show modal
    const modal = new bootstrap.Modal(document.getElementById('addToPlaylistModal'));
    modal.show();
}

function editTrack(id, title, artist, album, genre, description) {
    // Set form values
    document.getElementById('editTrackId').value = id;
    document.getElementById('editTrackTitle').value = title;
    document.getElementById('editTrackArtist').value = artist;
    document.getElementById('editTrackAlbum').value = album || '';
    document.getElementById('editTrackGenre').value = genre || '';
    document.getElementById('editTrackDescription').value = description || '';
    
    // Show modal
    const modal = new bootstrap.Modal(document.getElementById('editTrackModal'));
    modal.show();
}

function deleteTrack(id, title) {
    // Set track info
    document.getElementById('deleteTrackTitle').textContent = title;
    
    // Set up confirmation button
    const confirmBtn = document.getElementById('confirmDeleteTrack');
    confirmBtn.onclick = function() {
        performDeleteTrack(id);
    };
    
    // Show modal
    const modal = new bootstrap.Modal(document.getElementById('deleteTrackModal'));
    modal.show();
}

// Perform actual track deletion
function performDeleteTrack(id) {
    const url = window.deleteTrackRoute.replace('__ID__', id);
    
    fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Close modal
            bootstrap.Modal.getInstance(document.getElementById('deleteTrackModal')).hide();
            
            // Show success message
            showNotification('Track deleted successfully!', 'success');
            
            // Refresh page
            setTimeout(() => {
                location.reload();
            }, 1000);
        } else {
            showNotification('Error deleting track: ' + (data.error || data.message), 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showNotification('An error occurred while deleting the track.', 'error');
    });
}

// Add form submission handlers
document.addEventListener('DOMContentLoaded', function() {
    // Add to playlist form handler
    const addToPlaylistForm = document.getElementById('addToPlaylistForm');
    if (addToPlaylistForm) {
        addToPlaylistForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const trackId = document.getElementById('trackIdForPlaylist').value;
            const playlistId = document.getElementById('playlistSelect').value;
            
            if (!playlistId) {
                showNotification('Please select a playlist', 'warning');
                return;
            }
            
            // Call add track to playlist function
            addTrackToPlaylist(trackId, playlistId);
        });
    }
    
    // Edit track form handler  
    const editTrackForm = document.getElementById('editTrackForm');
    if (editTrackForm) {
        editTrackForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const trackId = document.getElementById('editTrackId').value;
            const url = window.editTrackRoute.replace('__ID__', trackId);
            
            fetch(url, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Close modal
                    bootstrap.Modal.getInstance(document.getElementById('editTrackModal')).hide();
                    
                    // Show success message
                    showNotification('Track updated successfully!', 'success');
                    
                    // Refresh page
                    setTimeout(() => {
                        location.reload();
                    }, 1000);
                } else {
                    showNotification('Error updating track: ' + (data.error || data.message), 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showNotification('An error occurred while updating the track.', 'error');
            });
        });
    }
});

// Add track to playlist function
function addTrackToPlaylist(trackId, playlistId) {
    fetch('/library/playlist/' + playlistId + '/add-track/' + trackId, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Close modal
            bootstrap.Modal.getInstance(document.getElementById('addToPlaylistModal')).hide();
            
            // Show success message
            showNotification('Track added to playlist successfully!', 'success');
        } else {
            showNotification('Error adding track to playlist: ' + (data.error || data.message), 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showNotification('An error occurred while adding the track to playlist.', 'error');
    });
}

// Remove track from playlist function
function removeTrackFromPlaylist(playlistId, trackId, trackTitle, playlistName) {
    // Set modal content
    document.getElementById('removeTrackTitle').textContent = trackTitle;
    document.getElementById('removeFromPlaylistName').textContent = playlistName;
    
    // Set up confirmation button
    const confirmBtn = document.getElementById('confirmRemoveTrackFromPlaylist');
    confirmBtn.onclick = function() {
        performRemoveTrackFromPlaylist(playlistId, trackId);
    };
    
    // Show modal
    const modal = new bootstrap.Modal(document.getElementById('removeTrackFromPlaylistModal'));
    modal.show();
}

// Perform actual track removal from playlist
function performRemoveTrackFromPlaylist(playlistId, trackId) {
    const formData = new FormData();
    formData.append('playlistId', playlistId);
    formData.append('trackId', trackId);
    
    fetch(window.removeTrackFromPlaylistRoute, {
        method: 'POST',
        body: formData,
        headers: {
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Close modal
            bootstrap.Modal.getInstance(document.getElementById('removeTrackFromPlaylistModal')).hide();
            
            showNotification('Track removed from playlist successfully!', 'success');
            
            // Refresh the playlist view if modal is open
            const modal = bootstrap.Modal.getInstance(document.getElementById('viewPlaylistModal'));
            if (modal && modal._isShown) {
                // Reload the playlist data
                setTimeout(() => {
                    viewPlaylist(playlistId);
                }, 500);
            } else {
                // Otherwise refresh the page
                setTimeout(() => {
                    location.reload();
                }, 1000);
            }
        } else {
            showNotification('Error removing track: ' + (data.error || data.message), 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showNotification('An error occurred while removing the track.', 'error');
    });
}
</script>
{% endblock %}